const fs=require("fs"),crypto=require("crypto"),bcrypt=require("bcryptjs"),{log:log}=require("console"),AUTH_TOKEN_LENGTH=40,MIN_PASSWORD_LENGTH=2,MAX_PASSWORD_LENGTH=30,MIN_USERNAME_LENGTH=3,MAX_USERNAME_LENGTH=30;let AUTH_TOKEN_AGE=2592e6;const DATA_DIR=require("path").dirname(__dirname+"/slimauth"),ACCOUNT_STORE_FILE=DATA_DIR+"/accounts.json",TOKEN_STORE_FILE=DATA_DIR+"/tokens.json";let accountStore,tokenStore,loginURL,privateURLObject={};class SlimAuth{constructor(){this.requestAuthenticator=middleware}setOptions(e){e.loginPageURL&&(loginURL=e.loginPageURL),e.authValidDuration&&(AUTH_TOKEN_AGE=24*e.authValidDuration*60*60*1e3),e.privateURLArray&&e.privateURLArray.forEach(e=>{privateURLObject[e]=!0})}createUser(e,t){return new Promise((r,o)=>{accountStore[e]?o(new Error("User account already exists")):t.length>MAX_PASSWORD_LENGTH?o(new Error("Max password length exceeded")):t.length<MIN_PASSWORD_LENGTH?o(new Error("Password too short")):e.length>MAX_USERNAME_LENGTH?o(new Error("Max username length exceeded")):e.length<MIN_USERNAME_LENGTH?o(new Error("Username too short")):(accountStore[e]=getTextHash(t),writeJSON(ACCOUNT_STORE_FILE,accountStore),r())})}deleteUser(e,t){return new Promise((r,o)=>{accountStore[e]?accountStore[e]!=getTextHash(t)?o(new Error("Incorrect password")):(delete accountStore[e],writeJSON(ACCOUNT_STORE_FILE,accountStore),this.deauthenticate(e),r()):o(new Error("User account does not exist"))})}updatePassword(e,t,r){return new Promise((o,n)=>{accountStore[e]?accountStore[e]!=getTextHash(t)?n(new Error("Incorrect password")):(accountStore[e]=getTextHash(r),writeJSON(ACCOUNT_STORE_FILE,accountStore),o()):n(new Error("User account does not exists"))})}authenticate(e,t,r){return new Promise((o,n)=>{let s=accountStore[e];if(s||n(new Error(`${e} does not exist`)),t.length>MAX_PASSWORD_LENGTH)n(new Error("Max password length exceeded"));else if(bcrypt.compareSync(t,s)){for(let t in tokenStore)if(tokenStore[t]==e){delete tokenStore[t];break}let t;do{t=getRandomString(AUTH_TOKEN_LENGTH)}while(tokenStore[t]);r.cookie("slimauth",t,{maxAge:AUTH_TOKEN_AGE,sameSite:!0}),tokenStore[t]=e,writeJSON(TOKEN_STORE_FILE,tokenStore),o()}else n(new Error("incorrect password"))})}deauthenticate(e){for(let t in tokenStore)if(tokenStore[t]==e){delete tokenStore[t];break}writeJSON(TOKEN_STORE_FILE,tokenStore)}}function middleware(e,t,r){let o=decodeURIComponent(e.headers.cookie),n=o.indexOf("slimauth=");if(n>-1){let r=o.substr(n+9,AUTH_TOKEN_LENGTH);e.userID=t.userID=tokenStore[r]}null==e.userID&&privateURLObject[e.baseUrl+e.path]?loginURL?t.redirect(loginURL+"?redirect="+encodeURIComponent(e.protocol+"://"+e.get("host")+e.originalUrl)):t.sendStatus(401):r()}function getRandomString(e){return crypto.randomBytes(.75*e).toString("base64").replace(/\W/g,"_")}function readJSON(e){return 0==fs.existsSync(e)?void 0:JSON.parse(fs.readFileSync(e),{encoding:"utf8"})}function writeJSON(e,t){fs.writeFileSync(e,JSON.stringify(t))}function getTextHash(e){return bcrypt.hashSync(e,10)}fs.existsSync(DATA_DIR)||fs.mkdirSync(DATA_DIR),fs.existsSync(ACCOUNT_STORE_FILE)||writeJSON(ACCOUNT_STORE_FILE,{}),accountStore=readJSON(ACCOUNT_STORE_FILE),fs.existsSync(TOKEN_STORE_FILE)||writeJSON(TOKEN_STORE_FILE,{}),tokenStore=readJSON(TOKEN_STORE_FILE),module.exports=new SlimAuth;
